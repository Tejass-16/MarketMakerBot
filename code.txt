require('dotenv').config();
const { Connection, PublicKey } = require('@solana/web3.js');

const RPC_URL = process.env.RPC_URL;
const connection = new Connection(RPC_URL);
const TOKEN_MINT = process.env.TOKEN_MINT || "9hjZ8UTNrNWt3YUTHVpvzdQjNbp64NbKSDsbLqKR6BZc";
const BUY_AMOUNT = parseFloat(process.env.BUY_AMOUNT) || 0.01;

// Fetch token price from a hypothetical API
// Fetch token price from CoinGecko API
async function fetchTokenPrice(tokenMint) {
    try {
        // Use a known token ID format, e.g., "solana" for Solana token on CoinGecko
        const apiTokenId = "solana"; // Replace with the correct CoinGecko token ID
        const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${apiTokenId}&vs_currencies=usd`);
        
        if (!response.ok) {
            throw new Error(`Error fetching token price: ${response.statusText}`);
        }

        const data = await response.json();
        console.log("API response:", data); // Log the full response for debugging

        // Access the price in the response based on API documentation
        const price = data[apiTokenId]?.usd;
        
        if (!price) {
            console.error("Token price not found in response.");
            return null;
        }

        return price;
    } catch (error) {
        console.error("Failed to fetch token price:", error);
        return null;
    }
}



// Function for market-making operations
async function marketMaker() {
    try {
        const tokenPrice = await fetchTokenPrice(TOKEN_MINT);
        
        if (tokenPrice !== null) {
            console.log(`Attempting to buy ${BUY_AMOUNT} of token ${TOKEN_MINT} at price ${tokenPrice}`);
            // Add your logic for making buy or sell transactions here, using tokenPrice and BUY_AMOUNT
        } else {
            console.log("Skipping market-making due to failed price fetch.");
        }
    } catch (error) {
        console.error("Error in market making:", error);
    }
}

// Run the market-making function periodically
setInterval(marketMaker, 5000);



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Market Maker Bot Status</title>
    <style>
        body { font-family: Arial, sans-serif; background-color: #f4f4f4; }
        #app { max-width: 600px; margin: 50px auto; padding: 20px; background: white; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
        h1 { font-size: 24px; color: #333; }
        p { font-size: 18px; color: #666; }
    </style>
</head>
<body>
    <div id="app">
        <h1>Market Maker Bot Status</h1>
        <p><strong>Current Price:</strong> <span id="price">Loading...</span></p>
        <p><strong>Status:</strong> <span id="status">Loading...</span></p>
    </div>

    <script>
        async function fetchStatus() {
            try {
                const response = await fetch('http://localhost:3000/api/status');
                const data = await response.json();
                document.getElementById('price').textContent = data.price !== null ? `$${data.price}` : 'N/A';
                document.getElementById('status').textContent = data.status;
            } catch (error) {
                console.error("Error fetching status:", error);
                document.getElementById('status').textContent = "Error fetching status";
            }
        }

        // Fetch status every 10 seconds
        setInterval(fetchStatus, 10000);
        fetchStatus(); // Initial fetch
    </script>
</body>
</html>


const express = require('express');
const axios = require('axios');

const app = express();
const PORT = 3000;

// In-memory data storage for simplicity
let botStatus = 'Initializing...';
let currentPrice = 'N/A';
let transactions = [];

// Function to simulate market-making actions
async function marketMaker() {
    try {
        const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd');
        currentPrice = response.data.solana.usd;
        
        // Log buy transaction and store it
        const transaction = {
            id: `txn_${Date.now()}`,
            type: 'buy',
            amount: 0.01,
            price: currentPrice,
            timestamp: Date.now()
        };
        transactions.push(transaction);

        botStatus = 'Running';
        console.log(`Transaction: Buying 0.01 SOL at price ${currentPrice}`);
    } catch (error) {
        botStatus = 'Error fetching price';
        console.error('Failed to fetch token price:', error);
    }
}

// Run market-making function at intervals
setInterval(marketMaker, 15000);

// Route to fetch bot status and transactions
app.get('/status', (req, res) => {
    res.json({
        status: botStatus,
        currentPrice,
        transactions
    });
});

app.use(express.static('public'));  // Serve static files from 'public' directory

app.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}`);
});
